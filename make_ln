#!/bin/bash
############################
# .make.sh
# This script creates symlinks from the home directory to any desired dotfiles in ~/dotfiles
############################

########## Variables

dir=~/dotfiles                    # dotfiles directory
local_dir=~/local                 # default local
olddir=~/dotfiles_backup             # old dotfiles backup directory
files="gitconfig gitattributes gitignore_global zshrc mongorc.js vimrc go"    # list of files/folders to symlink in homedir
dirs="$local_dir $local_dir/bin $local_dir/lib $local_dir/share"
brew_packages="bat prettyping fzf htop diff-so-fancy fd tldr jq csvkit"

##########

for folder in $dirs; do
    if [ ! -d $folder ]
        then
            echo "Create $folder directory"
            mkdir -p $folder
            echo "...done"
    fi
done

# create dotfiles_old in homedir
echo "Creating $olddir for backup of any existing dotfiles in ~"
mkdir -p $olddir
echo "...done"

# change to the dotfiles directory
echo "Changing to the $dir directory"
cd $dir
echo "...done"

echo "Symlink the bin files"
ln -sf $dir/bin/* $local_dir/bin

echo "Symlink the themes files"
ln -sf $dir/themes/* ~/.oh-my-zsh/themes/

echo "Symlink the custom files"
ln -sf $dir/custom/* ~/.oh-my-zsh/custom/

if [ ! -d $dir/vim/bundle/vundle ]
    then
        echo "initializing git submodules"
        git submodule update --init
        echo "...done"
fi

if [ ! -d ~/.vim/ ]
    then
        echo "Creating .vim folder"
        mkdir -p ~/.vim
        echo "...done"
fi

echo "Symlink the vim stuff"
ln -sf $dir/vim/* ~/.vim/
echo "...done"

# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks
for file in $files; do
    echo "Moving any existing dotfiles from ~ to $olddir"
    mv -f ~/.$file ~/dotfiles_old/
    echo "...done"
    echo "Copying $file to home directory."
    cp -Rf $dir/$file ~/.$file
    echo "...done"
done

echo "If it's a fresh OS installation don't forget to install fonts."

#add to git config the global ignores
git config --global core.excludesfile ~/.gitignore_global

# Install or update Homebrew
which -s brew
if [[ $? != 0 ]] ; then
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
    brew update
fi

brew install $brew_packages

# install fzf key bindigns
$(brew --prefix)/opt/fzf/install --all

# setup gitconfig basic info
read -p 'Do you want to setup your git config basic info? (Y/N) ' configurebasicvar
echo
if [ "$configurebasicvar" = "y" ] || [ "$configurebasicvar" = "Y"  ]; then
    read -p 'Name: ' namevar
    read -p 'Email: ' emailvar
    read -p 'Signing Key: ' signingkeyvar

    if test -n "$namevar"; then
        git config --global user.name "$namevar"
    fi

    if test -n "$emailvar"; then
        git config --global user.email "$emailvar"
    fi

    if test -n "$signingkeyvar"; then
        git config --global user.signingkey "$signingkeyvar"
    fi

    echo
    echo "Your git basic configuration"
    echo
    git config --global -l | grep user
fi
